https://leetcode.com/problems/middle-of-the-linked-list

Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

Bruteforce:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {

        int n = 0;

        ListNode* temp = head;

        while(temp != nullptr){
            n++;
            temp = temp->next;
        }
        ListNode* temp1 = head;
        if(n % 2 == 0){
            for(int i = 0;i<n/2;i++)
            {
                temp1 = temp1->next;
            }
        }
        else{
            for(int i=0;i<((n+1)/2)-1;i++){
                temp1 = temp1->next;
            }
        }
        return temp1;
        
    }
};
