https://leetcode.com/problems/bag-of-tokens

Greedy Algorithm

Example 1:
Input: tokens = [100], power = 50
Output: 0
Explanation: Since your score is 0 initially, you cannot play the token face-down. You also cannot play it face-up since your power (50) is less than tokens[0] (100).

Example 2:
Input: tokens = [200,100], power = 150
Output: 1
Explanation: Play token1 (100) face-up, reducing your power to 50 and increasing your score to 1.
There is no need to play token0, since you cannot play it face-up to add to your score. The maximum score achievable is 1.

Example 3:
Input: tokens = [100,200,300,400], power = 200
Output: 2
Explanation: Play the tokens in this order to get a score of 2:
Play token0 (100) face-up, reducing power to 100 and increasing score to 1.
Play token3 (400) face-down, increasing power to 500 and reducing score to 0.
Play token1 (200) face-up, reducing power to 300 and increasing score to 1.
Play token2 (300) face-up, reducing power to 0 and increasing score to 2.
The maximum score achievable is 2.

class Solution {
public:
    int bagOfTokensScore(vector<int>& tokens, int power) {
      int n = tokens.size();

      sort(begin(tokens),end(tokens));

      int maxSc = 0;
      int sc = 0;
      int i = 0;
      int j = n-1;

      while(i<=j){
          if(power>=tokens[i]){  //if i have power more than token then use it for increasing score
              power = power - tokens[i];
              sc = sc+1;
              maxSc = max(sc,maxSc);
              i++;
          }
          else if(sc>0){ //if i have score more than one and have less power than token then use the score to get maximum power from the token
              power = power+tokens[j];
              sc=sc-1;
              j--;
          }
          else{
              return maxSc;
          }
      }
      return maxSc;  
    }
};
